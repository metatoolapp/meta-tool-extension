// --- GLOBAL VARS & CONFIG ---
let ACCESS_TOKEN = "";
let USER_ID = "";
let customMessageModal, loginModal, taskModal, settingsModal, helpModal, userInfoModal;
let currentUserInfo = {};
const API_VERSION = "v20.0";
let searchTimeout = null;

let batchTaskInfo = {
    total: 0,
    succeeded: 0,
    failed: 0,
    results: []
};

let tableStates = {
    bm: { currentPage: 1, data: [], originalData: [], itemsPerPage: 20, activeStatusFilter: 'ALL', loaded: false },
    page: { currentPage: 1, data: [], originalData: [], itemsPerPage: 20, activeStatusFilter: 'ALL', loaded: false },
    pixel: { currentPage: 1, data: [], originalData: [], itemsPerPage: 20, activeStatusFilter: 'ALL', loaded: false },
    'ad-accounts': { currentPage: 1, data: [], originalData: [], itemsPerPage: 20, activeStatusFilter: 'ALL', loaded: false },
    campaigns: { currentPage: 1, data: [], originalData: [], itemsPerPage: 20, activeStatusFilter: 'ALL', loaded: false }
};

const STATUS_FILTERS = {
    bm: [ { value: 'ALL', text: 'Tất cả' }, { value: 'LIVE', text: 'Live' }, { value: 'DIE', text: 'Die' } ],
    page: [ { value: 'ALL', text: 'Tất cả' }, { value: 'PUBLISHED', text: 'Đã đăng' }, { value: 'UNPUBLISHED', text: 'Chưa đăng' } ],
    pixel: [ { value: 'ALL', text: 'Tất cả' }, { value: 'ACTIVE', text: 'Hoạt động' }, { value: 'INACTIVE', text: 'Không hoạt động' } ],
    'ad-accounts': [ { value: 'ALL', text: 'Tất cả' }, { value: 'Hoạt động', text: 'Hoạt động' }, { value: 'Vô hiệu hóa', text: 'Vô hiệu hóa' }, { value: 'OTHER', text: 'Khác' } ],
    campaigns: [ { value: 'ALL', text: 'Tất cả' }, { value: 'ACTIVE', text: 'Active' }, { value: 'PAUSED', text: 'Paused' }, { value: 'OTHER', text: 'Khác' } ]
};

let totalCampaignsSpend = 0; 
let totalAdAccountSpend = 0;
let charts = {};

let taskQueue = [];
let runningTasksCount = 0;
let maxConcurrentTasks = 5;
let taskLoopCount = 1;
let refreshQueue = new Set();

const SITE_KEY_FB = "6Ld7eCgUAAAAAAeX0m_21234567890abcdef"; 

const TASKS = {
    'bm_rename': { name: 'Đổi tên BM', types: ['bm'] }, 'bm_get_invite_link': { name: 'Lấy Link mời QTV', types: ['bm'] }, 'bm_create_ad_account': { name: 'Tạo TKQC trong BM', types: ['bm'] },
    'page_toggle_publish': { name: 'Bật/Tắt đăng trang', types: ['page'] }, 'pixel_share_to_ad_account': { name: 'Share Pixel cho TKQC', types: ['pixel'] },
    'ad_grant_user_permissions': { name: 'Cấp quyền TKQC cho User', types: ['adaccount'] }, 'ad_toggle_status': { name: 'Bật/Tắt TKQC', types: ['adaccount'] }, 'ad_set_spend_limit': { name: 'Đặt giới hạn chi tiêu', types: ['adaccount'] }, 'ad_rename': { name: 'Đổi tên TKQC', types: ['adaccount'] },
    'camp_toggle_status': { name: 'Bật/Tắt chiến dịch', types: ['campaign'] }, 'camp_set_budget': { name: 'Đổi ngân sách', types: ['campaign'] },
    'other_export_table': { name: 'Xuất dữ liệu bảng hiện tại', types: ['bm', 'page', 'pixel', 'adaccount', 'campaign'] }
};

// --- UTILITY FUNCTIONS ---
function val(id) { return document.getElementById(id)?.value.trim() || ''; }
function showCustomMessage(title, message, duration = 2000) { 
    if (!customMessageModal) customMessageModal = new bootstrap.Modal(document.getElementById('customMessageModal'));
    $('#customMessageModalLabel').text(title); 
    $('#customMessageModalBody').html(message); 
    customMessageModal.show(); 
    if (duration) {
        setTimeout(() => customMessageModal.hide(), duration);
    }
}

function renderStatusFilters(tabId) {
    const container = $('#status-filter-container');
    container.empty();
    const filters = STATUS_FILTERS[tabId];
    if (!filters) return;
    const activeFilter = tableStates[tabId]?.activeStatusFilter || 'ALL';
    let buttonsHtml = '';
    filters.forEach(filter => {
        buttonsHtml += `<button data-value="${filter.value}" class="${filter.value === activeFilter ? 'active' : ''}">${filter.text}</button>`;
    });
    container.html(buttonsHtml);
}

async function switchTab(tabId) { 
    const targetId = tabId.substring(1); 
    $('#sidebar-nav a').removeClass('active');
    $(`#sidebar-nav a[href="${tabId}"]`).addClass('active');
    $('.tab-content').addClass('hidden');
    $(`#${targetId}`).removeClass('hidden');
    $('.selected, .selected-col').removeClass('selected selected-col'); 
    selectedColumnIndex = -1; 
    updateCopyButtons(targetId);
    renderStatusFilters(targetId);

    const state = tableStates[targetId];
    if (!state) {
        if (targetId === 'statistics') renderStatisticsCharts();
        return;
    }

    if (state.loaded) {
        handleFiltersAndSearch();
        return;
    }

    if (ACCESS_TOKEN) {
        if (targetId === 'campaigns') {
            if (!tableStates['ad-accounts'].loaded) {
                await DATA_LOADERS['ad-accounts'](ACCESS_TOKEN);
            }
            if (tableStates['ad-accounts'].originalData.length === 0) {
                displayErrorInTable('campaignsTableBody', new Error("Cần có dữ liệu TKQC để tải chiến dịch. Hãy kiểm tra lại tab TKQC."));
                state.loaded = true;
                return;
            }
        }
        
        const loader = DATA_LOADERS[targetId];
        if (loader) {
            await loader(ACCESS_TOKEN);
        }
    }
}

function displayErrorInTable(tbodyId, error) { const tbody = $(`#${tbodyId}`); const colspan = tbody.closest('table').find('thead th').length; const msg = `Lỗi: ${error.message || 'Không rõ'}.<br><small>Kiểm tra lại Access Token, quyền hạn hoặc bấm nút Tải lại.</small>`; tbody.html(`<tr><td colspan="${colspan}" class="text-center text-red-500 p-4">${msg}</td></tr>`); }
function showLoading(tbodyId) { const tbody = $(`#${tbodyId}`); const colspan = tbody.closest('table').find('thead th').length; tbody.html(`<tr><td colspan="${colspan}" class="text-center p-10"><div class="spinner-border text-purple-500"></div></td></tr>`); }
function updateRowStatus(rowElement, processHtml, messageHtml, messageClass = 'text-slate-600') { $(rowElement).find('.process-cell').html(processHtml); $(rowElement).find('.message-cell').html(`<span class="text-xs ${messageClass}">${messageHtml}</span>`); }
async function fetchAllPages(initialUrl, token) { let allData = []; let nextUrl = initialUrl; while (nextUrl) { try { const response = await fetch(`${nextUrl}&access_token=${token}`); const json = await response.json(); if (json.error) throw new Error(json.error.message); if (json.data) allData = allData.concat(json.data); nextUrl = json.paging?.next || null; } catch (error) { console.error("Lỗi khi fetch phân trang:", error); nextUrl = null; } } return allData; }
function formatCurrency(value, currencyCode = 'USD') { const numValue = parseFloat(value); if (isNaN(numValue)) return value; try { let locale = 'en-US'; if (currencyCode === 'VND') locale = 'vi-VN'; return new Intl.NumberFormat(locale, { style: 'currency', currency: currencyCode }).format(numValue); } catch (e) { return `${numValue.toLocaleString('en-US')} ${currencyCode}`; } }
function copyToClipboard(text) { if (!text) { showCustomMessage("Thông báo", "Không có gì để sao chép.", 1500); return; } const textArea = document.createElement("textarea"); textArea.value = text; document.body.appendChild(textArea); textArea.focus(); textArea.select(); try { document.execCommand('copy'); showCustomMessage("Thành công", `Đã sao chép ${text.split('\n').length} ID vào clipboard.`, 1500); } catch (err) { showCustomMessage("Lỗi", "Không thể sao chép vào clipboard.", 1500); console.error('Không thể sao chép: ', err); } document.body.removeChild(textArea); }

function renderPaginationControls(tabId) { const state = tableStates[tabId]; const totalItems = state.data.length; const totalPages = Math.ceil(totalItems / state.itemsPerPage); const currentPage = state.currentPage; const paginationContainer = $(`#${tabId}-pagination`); if (totalPages <= 1) { paginationContainer.html(''); return; } let paginationHtml = `<button class="prev-btn" ${currentPage === 1 ? 'disabled' : ''}>&laquo; Trước</button>`; const maxPagesToShow = 5; let startPage, endPage; if (totalPages <= maxPagesToShow) { startPage = 1; endPage = totalPages; } else { if (currentPage <= Math.floor(maxPagesToShow / 2) + 1) { startPage = 1; endPage = maxPagesToShow; } else if (currentPage + Math.floor(maxPagesToShow / 2) - 1 >= totalPages) { startPage = totalPages - maxPagesToShow + 1; endPage = totalPages; } else { startPage = currentPage - Math.floor(maxPagesToShow / 2); endPage = currentPage + Math.floor(maxPagesToShow / 2); } } if (startPage > 1) { paginationHtml += `<button class="page-btn" data-page="1">1</button>`; if (startPage > 2) paginationHtml += `<span>...</span>`; } for (let i = startPage; i <= endPage; i++) { paginationHtml += `<button class="page-btn ${i === currentPage ? 'active' : ''}" data-page="${i}">${i}</button>`; } if (endPage < totalPages) { if (endPage < totalPages - 1) paginationHtml += `<span>...</span>`; paginationHtml += `<button class="page-btn" data-page="${totalPages}">${totalPages}</button>`; } paginationHtml += `<button class="next-btn" ${currentPage === totalPages ? 'disabled' : ''}>Sau &raquo;</button>`; paginationContainer.html(paginationHtml); }
function displayPage(tabId, page) {
    const state = tableStates[tabId];
    if (!state || !state.data) return;
    const totalItems = state.data.length;
    const totalPages = Math.ceil(totalItems / state.itemsPerPage);
    if (page < 1 || (page > totalPages && totalPages > 0)) return;
    state.currentPage = (totalPages === 0) ? 1 : page;
    const startIndex = (state.currentPage - 1) * state.itemsPerPage;
    const endIndex = startIndex + state.itemsPerPage;
    const pageData = state.data.slice(startIndex, endIndex);
    let tbodyId = `${tabId}TableBody`;
    if (tabId === 'ad-accounts') { tbodyId = 'adAccountsTableBody'; }
    const tbody = $(`#${tbodyId}`);
    tbody.empty();
    if (pageData.length === 0) {
         const colspan = tbody.closest('table').find('thead th').length;
         tbody.html(`<tr><td colspan="${colspan}" class="text-center p-4">Không có dữ liệu để hiển thị.</td></tr>`);
    } else {
        let rowsHtml = '';
        switch(tabId) {
            case 'bm': rowsHtml = generateBMRows(pageData, startIndex); break;
            case 'page': rowsHtml = generatePageRows(pageData, startIndex); break;
            case 'pixel': rowsHtml = generatePixelRows(pageData, startIndex); break;
            case 'ad-accounts': rowsHtml = generateAdAccountsRows(pageData, startIndex); break;
            case 'campaigns': rowsHtml = generateCampaignsRows(pageData, startIndex); break;
        }
        tbody.html(rowsHtml);
    }
    renderPaginationControls(tabId);
}
function generateActionDropdown(objectType) { let options = '<option value="">Chọn tác vụ...</option>'; for (const key in TASKS) { if (TASKS[key].types.includes(objectType)) { options += `<option value="${key}">${TASKS[key].name}</option>`; } } return `<select class="action-select border border-gray-300 rounded-md p-1 text-sm bg-white w-full">${options}</select>`;}
function generateTaskInputs(taskKey, objectId, objectCurrentStatus = null, objectCurrency = 'USD') { let html = ''; switch (taskKey) { case 'bm_rename': html = `<label class="form-label">Tên mới cho BM ${objectId}:</label><input type="text" class="form-control" id="modal_input_1" placeholder="Nhập tên BM mới">`; break; case 'bm_get_invite_link': html = `<p>Bạn có chắc chắn muốn lấy link mời quản trị viên cho BM <strong>${objectId}</strong>?</p>`; break; case 'bm_create_ad_account': html = `<label class="form-label">Tên TKQC mới:</label><input type="text" class="form-control mb-2" id="modal_input_1" placeholder="Nhập tên TKQC"><label class="form-label">Tiền tệ (ví dụ: USD, VND):</label><input type="text" class="form-control mb-2" id="modal_input_2" value="VND"><label class="form-label">Múi giờ (ví dụ: 7 cho GMT+7):</label><input type="number" class="form-control" id="modal_input_3" value="7">`; break; case 'page_toggle_publish': const publishStatus = objectCurrentStatus === 'PUBLISHED' ? 'tắt' : 'bật'; html = `<p>Bạn có chắc chắn muốn ${publishStatus} đăng trang cho Page <strong>${objectId}</strong>?</p>`; break; case 'pixel_share_to_ad_account': html = `<label class="form-label">ID Tài khoản quảng cáo cần share Pixel ${objectId} tới:</label><input type="text" class="form-control" id="modal_input_1" placeholder="act_12345...">`; break; case 'ad_grant_user_permissions': html = `<label class="form-label">User ID cần cấp quyền cho TKQC ${objectId}:</label><input type="text" class="form-control mb-2" id="modal_input_1" placeholder="Nhập Facebook User ID"><label class="form-label">Quyền:</label><select class="form-select" id="modal_input_2"><option value="ADMIN">Quản trị viên (Toàn quyền)</option><option value="ADVERTISER">Nhà quảng cáo</option><option value="ANALYST">Nhà phân tích</option></select>`; break; case 'ad_toggle_status': const adStatus = objectCurrentStatus === 'Hoạt động' ? 'vô hiệu hóa' : 'kích hoạt'; html = `<p>Bạn có chắc chắn muốn ${adStatus} TKQC <strong>${objectId}</strong>?</p>`; break; case 'ad_set_spend_limit': html = `<label class="form-label">Giới hạn chi tiêu mới cho TKQC ${objectId} (${objectCurrency}):</label><input type="number" class="form-control" id="modal_input_1" placeholder="Ví dụ: 50 (cho ${objectCurrency})">`; break; case 'ad_rename': html = `<label class="form-label">Tên mới cho TKQC ${objectId}:</label><input type="text" class="form-control" id="modal_input_1" placeholder="Nhập tên TKQC mới">`; break; case 'camp_toggle_status': const campStatus = objectCurrentStatus === 'ACTIVE' ? 'tạm dừng' : 'kích hoạt'; html = `<p>Bạn có chắc chắn muốn ${campStatus} chiến dịch <strong>${objectId}</strong>?</p>`; break; case 'camp_set_budget': html = `<label class="form-label">Loại ngân sách:</label><select class="form-select mb-2" id="modal_input_1"><option value="daily_budget">Hàng ngày</option><option value="lifetime_budget">Trọn đời</option></select><label class="form-label">Số tiền mới cho chiến dịch ${objectId} (${objectCurrency}):</label><input type="number" class="form-control" id="modal_input_2" placeholder="Ví dụ: 50 (cho ${objectCurrency})">`; break; case 'other_export_table': html = `<p>Bạn có chắc chắn muốn xuất dữ liệu bảng hiện tại ra file CSV?</p>`; break; default: html = `<p>Tác vụ này không yêu cầu nhập liệu thêm.</p>`; } return html; }
async function openTaskModal(taskKey, objectId, rowElement) { const task = TASKS[taskKey]; if (!task) return; $('#taskModalTitle').text(task.name); let currentStatus = null; let objectCurrency = 'USD'; if (rowElement) { currentStatus = $(rowElement).data('status'); if ($(rowElement).data('type') === 'adaccount') { objectCurrency = $(rowElement).data('currency'); } else if ($(rowElement).data('type') === 'campaign') { const campaignId = $(rowElement).data('id'); const campaign = tableStates.campaigns.data.find(c => c.id === campaignId); if (campaign && campaign.ad_account && campaign.ad_account.currency) { objectCurrency = campaign.ad_account.currency; } } } $('#taskModalBody').html(generateTaskInputs(taskKey, objectId, currentStatus, objectCurrency)); const executeBtn = $('#executeTaskBtn'); executeBtn.data('taskKey', taskKey); executeBtn.data('rowElement', rowElement); if (!taskModal) taskModal = new bootstrap.Modal(document.getElementById('taskModal')); taskModal.show(); }
async function executeTaskFromModal() { const executeBtn = $('#executeTaskBtn'); const taskKey = executeBtn.data('taskKey'); const primaryRowElement = $(executeBtn.data('rowElement')); const inputs = { input1: $('#modal_input_1').val(), input2: $('#modal_input_2').val(), input3: $('#modal_input_3').val(), input4: $('#modal_input_4').val() }; taskModal.hide(); const activeTable = primaryRowElement.closest('table'); const checkedRows = activeTable.find('tbody .row-checkbox:checked'); const targetRows = checkedRows.length > 0 ? checkedRows.closest('tr') : primaryRowElement; if (targetRows.length > 1) { batchTaskInfo = { total: targetRows.length * taskLoopCount, succeeded: 0, failed: 0, results: [] }; } targetRows.each(function() { const currentRow = $(this); const taskDetails = { taskKey, objectId: currentRow.data('id'), rowElement: currentRow[0], objectCurrentStatus: currentRow.data('status'), objectCurrency: currentRow.data('currency'), inputs }; addTaskToQueue(taskDetails); }); }
function addTaskToQueue(taskDetails) { for (let i = 0; i < taskLoopCount; i++) { taskQueue.push({ ...taskDetails, loopIndex: i + 1 }); } processTaskQueue(); }
async function processTaskQueue() { while (runningTasksCount < maxConcurrentTasks && taskQueue.length > 0) { const taskDetails = taskQueue.shift(); runningTasksCount++; executeQueuedTask(taskDetails); } }
async function executeQueuedTask(taskDetails) { const { taskKey, objectId, rowElement, objectCurrentStatus, objectCurrency, inputs, loopIndex } = taskDetails; const loopMessage = taskLoopCount > 1 ? ` (Lần ${loopIndex}/${taskLoopCount})` : ''; updateRowStatus(rowElement, '<div class="spinner-border spinner-border-sm"></div>', `Đang xử lý...${loopMessage}`, 'text-blue-600'); try { let result; switch (taskKey) { case 'bm_rename': result = await renameBM(objectId, inputs.input1); break; case 'bm_get_invite_link': result = await getBMInviteLink(objectId); break; case 'bm_create_ad_account': result = await createAd(objectId, inputs.input1, inputs.input2, inputs.input3); break; case 'page_toggle_publish': const isPublished = objectCurrentStatus === 'PUBLISHED'; result = await togglePagePublish(objectId, !isPublished); break; case 'pixel_share_to_ad_account': result = await sharePixelToAdAccount(objectId, inputs.input1); break; case 'ad_grant_user_permissions': result = await grantAdAccountPermission(objectId, inputs.input1, inputs.input2); break; case 'ad_toggle_status': const newAdStatus = objectCurrentStatus === 'Hoạt động' ? 'DISABLED' : 'ACTIVE'; result = await toggleAdAccount(objectId, newAdStatus); break; case 'ad_set_spend_limit': result = await changeLimit(objectId, inputs.input1); break; case 'ad_rename': result = await renameAd(objectId, inputs.input1); break; case 'camp_toggle_status': const newCampStatus = objectCurrentStatus === 'ACTIVE' ? 'PAUSED' : 'ACTIVE'; result = await toggleCampaign(objectId, newCampStatus); break; case 'camp_set_budget': result = await changeBudget(objectId, inputs.input1, inputs.input2); break; case 'other_export_table': result = await exportTable(); break; default: result = { success: false, message: "Tác vụ chưa được cài đặt." }; } if (result.success) { updateRowStatus(rowElement, '<i class="fa-solid fa-check text-green-500"></i>', `${result.message}${loopMessage}`, 'text-green-600'); batchTaskInfo.succeeded++; batchTaskInfo.results.push({id: objectId, status: 'Thành công', message: result.message}); let updatedClientSide = false; if (taskKey === 'bm_rename' || taskKey === 'ad_rename') { const stateKey = taskKey === 'bm_rename' ? 'bm' : 'ad-accounts'; const state = tableStates[stateKey]; const itemIndex = state.originalData.findIndex(item => item.id === objectId); if (itemIndex > -1) { state.originalData[itemIndex].name = inputs.input1; handleFiltersAndSearch(); updatedClientSide = true; } } if (!updatedClientSide) { if (taskKey.startsWith('bm_')) refreshQueue.add(loadBM); else if (taskKey.startsWith('page_')) refreshQueue.add(loadPages); else if (taskKey.startsWith('pixel_')) refreshQueue.add(loadPixels); else if (taskKey.startsWith('ad_')) refreshQueue.add(loadAdAccountsData); else if (taskKey.startsWith('camp_')) refreshQueue.add(loadCampaignsData); } } else { throw new Error(result.message); } } catch (error) { console.error(`Lỗi thực thi tác vụ ${taskKey}${loopMessage}:`, error); updateRowStatus(rowElement, '<i class="fa-solid fa-xmark text-red-500"></i>', `Lỗi: ${error.message}${loopMessage}`, 'text-red-600'); batchTaskInfo.failed++; batchTaskInfo.results.push({id: objectId, status: 'Thất bại', message: error.message}); } finally { runningTasksCount--; processTaskQueue(); if (batchTaskInfo.total > 0 && (batchTaskInfo.succeeded + batchTaskInfo.failed === batchTaskInfo.total)) { let resultsHtml = `<p><b>Tổng kết: ${batchTaskInfo.succeeded} thành công, ${batchTaskInfo.failed} thất bại.</b></p><ul class="list-disc list-inside mt-2" style="max-height: 200px; overflow-y: auto;">`; batchTaskInfo.results.forEach(res => { const icon = res.status === 'Thành công' ? '<i class="fa-solid fa-check text-green-500"></i>' : '<i class="fa-solid fa-xmark text-red-500"></i>'; resultsHtml += `<li class="text-sm">${icon} [${res.id}]: ${res.message}</li>`; }); resultsHtml += `</ul>`; showCustomMessage("Hoàn thành tác vụ hàng loạt", resultsHtml, null); batchTaskInfo = { total: 0, succeeded: 0, failed: 0, results: [] }; } if (runningTasksCount === 0 && taskQueue.length === 0) { if (refreshQueue.size > 0) { showCustomMessage("Cập nhật dữ liệu", "Đang tải lại dữ liệu cho các bảng đã thay đổi...", null); const refreshPromises = Array.from(refreshQueue).map(func => func(ACCESS_TOKEN)); Promise.all(refreshPromises).then(() => { if (refreshQueue.has(loadAdAccountsData)) return loadCampaignsData(ACCESS_TOKEN); }).then(() => { renderStatisticsCharts(); customMessageModal.hide(); }).catch(err => { console.error("Error during targeted refresh:", err); showCustomMessage("Lỗi", "Có lỗi xảy ra khi cập nhật dữ liệu."); }).finally(() => refreshQueue.clear()); } } } }
async function grantAdAccountPermission(adAccountId, userId, role) { try { if (!adAccountId || !userId || !role) throw new Error("Nhập đủ ID TKQC, User ID & Quyền!"); const rolesMap = { "ADMIN": ["ADMIN", "ADVERTISER", "ANALYZE"], "ADVERTISER": ["ADVERTISER", "ANALYZE"], "ANALYST": ["ANALYZE"] }; const tasks = rolesMap[role] || ["ANALYZE"]; let res = await fetch(`https://graph.facebook.com/${API_VERSION}/act_${adAccountId}/assigned_users?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ user: userId, tasks: tasks }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Cấp quyền ${role} cho User ${userId} thành công.` }; } catch (e) { return { success: false, message: `Lỗi Cấp quyền TKQC: ${e.message}` }; } }
async function solveCaptcha(siteKey, pageUrl) { const captchaProvider = localStorage.getItem('captchaProvider') || '2captcha.com'; const apiCaptchaKey = localStorage.getItem('apiCaptchaKey'); if (!apiCaptchaKey) { throw new Error("API Key cho dịch vụ Captcha chưa được cấu hình."); } let apiUrl = ''; let payload = {}; if (captchaProvider === '2captcha.com') { apiUrl = `https://2captcha.com/in.php?key=${apiCaptchaKey}&method=hcaptcha&sitekey=${siteKey}&pageurl=${encodeURIComponent(pageUrl)}&json=1`; } else if (captchaProvider === 'anticaptcha.top') { apiUrl = `https://api.anti-captcha.com/createTask`; payload = { clientKey: apiCaptchaKey, task: { type: "HCaptchaTaskProxyless", websiteURL: pageUrl, websiteKey: siteKey } }; } try { let res; if (captchaProvider === '2captcha.com') { res = await fetch(apiUrl); } else { res = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }); } const data = await res.json(); if (captchaProvider === '2captcha.com') { if (data.status === 1) { const requestId = data.request; let captchaResult = null; for (let i = 0; i < 20; i++) { await new Promise(r => setTimeout(r, 5000)); const checkRes = await fetch(`https://2captcha.com/res.php?key=${apiCaptchaKey}&action=get&id=${requestId}&json=1`); const checkData = await checkRes.json(); if (checkData.status === 1) { captchaResult = checkData.request; break; } if (checkData.request === 'CAPCHA_NOT_READY') {} else { throw new Error(`2Captcha error: ${checkData.request}`); } } if (!captchaResult) throw new Error("Captcha giải không thành công hoặc hết thời gian."); return captchaResult; } else { throw new Error(`2Captcha error: ${data.request}`); } } else if (captchaProvider === 'anticaptcha.top') { if (data.errorId === 0) { const taskId = data.taskId; let captchaResult = null; for (let i = 0; i < 20; i++) { await new Promise(r => setTimeout(r, 5000)); const checkRes = await fetch(`https://api.anti-captcha.com/getTaskResult`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ clientKey: apiCaptchaKey, taskId: taskId }) }); const checkData = await checkRes.json(); if (checkData.status === 'ready') { captchaResult = checkData.solution.gRecaptchaResponse; break; } if (checkData.status === 'processing') {} else { throw new Error(`Anti-Captcha error: ${checkData.errorDescription || checkData.status}`); } } if (!captchaResult) throw new Error("Captcha giải không thành công hoặc hết thời gian."); return captchaResult; } else { throw new Error(`Anti-Captcha error: ${data.errorDescription}`); } } } catch (e) { console.error("Lỗi giải Captcha:", e); throw e; } }
async function getSimAndOtp() { const simProvider = localStorage.getItem('simProvider') || 'viotp.com'; const apiSimKey = localStorage.getItem('apiSimKey'); if (!apiSimKey) { throw new Error("API Key cho dịch vụ OTP (SIM) chưa được cấu hình."); } let phoneNumber = ''; let otpCode = ''; try { if (simProvider === 'viotp.com') { const getPhoneRes = await fetch(`https://api.viotp.com/request/get?token=${apiSimKey}&serviceId=1`); const phoneData = await getPhoneRes.json(); if (phoneData.status_code !== 200) throw new Error(`VIOTP: ${phoneData.message}`); phoneNumber = phoneData.data.phone_number; const requestId = phoneData.data.request_id; for (let i = 0; i < 10; i++) { await new Promise(r => setTimeout(r, 10000)); const getOtpRes = await fetch(`https://api.viotp.com/request/check?token=${apiSimKey}&requestId=${requestId}`); const otpData = await getOtpRes.json(); if (otpData.status_code === 200 && otpData.data.Code) { otpCode = otpData.data.Code; break; } if (otpData.status_code === 400 && otpData.message === 'request not found') {} else if (otpData.status_code !== 200) { throw new Error(`VIOTP OTP check: ${otpData.message}`); } } if (!otpCode) throw new Error("Không nhận được OTP từ VIOTP hoặc hết thời gian."); } else if (simProvider === 'sim24.cc') { const getPhoneRes = await fetch(`https://sim24.cc/api.php?action=getNumber&apikey=${apiSimKey}&service=facebook`); const phoneData = await getPhoneRes.json(); if (phoneData.status !== 'success') throw new Error(`SIM24.CC: ${phoneData.message}`); phoneNumber = phoneData.number; const orderId = phoneData.order_id; for (let i = 0; i < 10; i++) { await new Promise(r => setTimeout(r, 10000)); const getOtpRes = await fetch(`https://sim24.cc/api.php?action=getSMS&apikey=${apiSimKey}&orderid=${orderId}`); const otpData = await getOtpRes.json(); if (otpData.status === 'success' && otpData.sms) { const match = otpData.sms.match(/\d{6}/); if (match) { otpCode = match[0]; break; } } if (otpData.status === 'pending') {} else if (otpData.status !== 'success') { throw new Error(`SIM24.CC OTP check: ${otpData.message}`); } } if (!otpCode) throw new Error("Không nhận được OTP từ SIM24.CC hoặc hết thời gian."); } return otpCode; } catch (e) { console.error("Lỗi thuê SIM/lấy OTP:", e); throw e; } }
async function createBM(name) { try { if (!name) throw new Error("Chưa nhập tên BM!"); let res = await fetch(`https://graph.facebook.com/${API_VERSION}/me/businesses?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: name, vertical: "ADVERTISING" }) }); let data = await res.json(); if (data.error?.message.includes("captcha")) { const cap = await solveCaptcha(SITE_KEY_FB, "https://www.facebook.com/"); res = await fetch(`https://graph.facebook.com/${API_VERSION}/me/businesses?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: name, vertical: "ADVERTISING", captcha_response: cap }) }); data = await res.json(); } if (data.error?.message.includes("phone")) { const otp = await getSimAndOtp(); await fetch(`https://graph.facebook.com/${API_VERSION}/me/verify_phone?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ otp: otp }) }); } if (data.error) throw new Error(data.error.message); return { success: true, message: `Tạo BM thành công: ${data.id} - ${data.name}` }; } catch (e) { return { success: false, message: `Lỗi tạo BM: ${e.message}` }; } }
async function renameBM(bmId, newName) { try { if (!bmId || !newName) throw new Error("Nhập đủ ID BM & tên mới!"); let res = await fetch(`https://graph.facebook.com/${API_VERSION}/${bmId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: newName }) }); let data = await res.json(); if (data.error?.message.includes("captcha")) { const cap = await solveCaptcha(SITE_KEY_FB, "https://www.facebook.com/"); res = await fetch(`https://graph.facebook.com/${API_VERSION}/${bmId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: newName, captcha_response: cap }) }); data = await res.json(); } if (data.error) throw new Error(data.error.message); return { success: true, message: `Đổi tên BM thành công.` }; } catch (e) { return { success: false, message: `Lỗi đổi tên BM: ${e.message}` }; } }
async function getBMInviteLink(bmId) { try { if (!bmId) throw new Error("Chưa nhập ID BM!"); const params = new URLSearchParams({ email: 'temp_invite@example.com', role: 'ADMIN' }); const response = await fetch(`https://graph.facebook.com/${API_VERSION}/${bmId}/business_users?${params.toString()}&access_token=${ACCESS_TOKEN}`, { method: 'POST' }); const result = await response.json(); if (result.invite_link) { return { success: true, message: `Link mời QTV (hiệu lực 30 ngày): ${result.invite_link}` }; } else { throw new Error(result.error.message); } } catch (e) { return { success: false, message: `Lỗi Lấy Link mời QTV: ${e.message}` }; } }
async function createAd(bmId, name, currency = "VND", timezone_id = 7) { try { if (!name) throw new Error("Chưa nhập tên TKQC!"); let bodyData = { name: name, currency: currency, timezone_id: timezone_id }; let endpoint = `me/adaccounts`; if (bmId) { endpoint = `${bmId}/owned_ad_accounts`; bodyData.end_advertiser = bmId; bodyData.media_agency = 'NONE'; bodyData.partner = 'NONE'; } let res = await fetch(`https://graph.facebook.com/${API_VERSION}/${endpoint}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(bodyData) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Tạo TKQC thành công: ${data.id} - ${data.name}` }; } catch (e) { return { success: false, message: `Lỗi tạo TKQC: ${e.message}` }; } }
async function renameAd(adAccountId, newName) { try { if (!adAccountId || !newName) throw new Error("Nhập đủ ID TKQC & tên mới!"); let res = await fetch(`https://graph.facebook.com/${API_VERSION}/act_${adAccountId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: newName }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Đổi tên TKQC thành công.` }; } catch (e) { return { success: false, message: `Lỗi đổi tên TKQC: ${e.message}` }; } }
async function toggleAdAccount(adAccountId, status) { try { if (!adAccountId || !status) throw new Error("Vui lòng nhập ID TKQC và trạng thái!"); const numericStatus = status === "ACTIVE" ? 1 : 2; let res = await fetch(`https://graph.facebook.com/${API_VERSION}/act_${adAccountId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ account_status: numericStatus }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Bật/Tắt TKQC thành công.` }; } catch (e) { return { success: false, message: `Lỗi Bật/Tắt TKQC: ${e.message}` }; } }
async function changeLimit(adAccountId, newLimit) { try { if (!adAccountId || isNaN(newLimit)) throw new Error("Vui lòng nhập ID TKQC và giới hạn mới hợp lệ!"); const limitInCents = parseFloat(newLimit) * 100; let res = await fetch(`https://graph.facebook.com/${API_VERSION}/act_${adAccountId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ spend_cap: limitInCents }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Đổi Limit TKQC thành công.` }; } catch (e) { return { success: false, message: `Lỗi Đổi Limit TKQC: ${e.message}` }; } }
async function createPage(pageName, pageCategory = "PRODUCT_SERVICE") { try { if (!pageName) throw new Error("Vui lòng nhập tên Page!"); let res = await fetch(`https://graph.facebook.com/${API_VERSION}/me/accounts?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: pageName, category: pageCategory }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Tạo Page thành công: ${data.id} - ${data.name}` }; } catch (e) { return { success: false, message: `Lỗi Tạo Page: ${e.message}` }; } }
async function togglePagePublish(pageId, isPublished) { try { if (!pageId) throw new Error("Vui lòng nhập ID Page!"); const res = await fetch(`https://graph.facebook.com/${API_VERSION}/${pageId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ is_published: isPublished }) }); const data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Đã ${isPublished ? 'bật' : 'tắt'} đăng trang thành công.` }; } catch (e) { return { success: false, message: `Lỗi Bật/Tắt đăng trang: ${e.message}` }; } }
async function addPixel(bmId, pixelName) { try { if (!pixelName) throw new Error("Vui lòng nhập tên Pixel!"); let endpoint = `me/ad_pixels`; let bodyData = { name: pixelName }; if (bmId) { endpoint = `${bmId}/owned_pixels`; } let res = await fetch(`https://graph.facebook.com/${API_VERSION}/${endpoint}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(bodyData) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Thêm Pixel thành công: ${data.id} - ${data.name}` }; } catch (e) { return { success: false, message: `Lỗi Thêm Pixel: ${e.message}` }; } }
async function sharePixelToAdAccount(pixelId, adAccountId) { try { if (!pixelId || !adAccountId) throw new Error("Vui lòng nhập ID Pixel và ID Tài khoản quảng cáo!"); const res = await fetch(`https://graph.facebook.com/${API_VERSION}/${pixelId}/shared_ad_accounts?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ ad_account_id: adAccountId }) }); const data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Share Pixel ${pixelId} cho TKQC ${adAccountId} thành công.` }; } catch (e) { return { success: false, message: `Lỗi Share Pixel cho TKQC: ${e.message}` }; } }
async function toggleCampaign(campaignId, status) { try { if (!campaignId || !status) throw new Error("Vui lòng nhập ID Chiến dịch và trạng thái!"); let res = await fetch(`https://graph.facebook.com/${API_VERSION}/${campaignId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ status: status }) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Bật/Tắt chiến dịch thành công.` }; } catch (e) { return { success: false, message: `Lỗi Bật/Tắt chiến dịch: ${e.message}` }; } }
async function changeBudget(campaignId, budgetType, newBudget) { try { if (!campaignId || !budgetType || isNaN(newBudget)) throw new Error("Vui lòng nhập ID Chiến dịch, loại ngân sách và ngân sách mới hợp lệ!"); const budgetInCents = parseFloat(newBudget) * 100; let body = {}; body[budgetType] = budgetInCents; let res = await fetch(`https://graph.facebook.com/${API_VERSION}/${campaignId}?access_token=${ACCESS_TOKEN}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body) }); let data = await res.json(); if (data.error) throw new Error(data.error.message); return { success: true, message: `Chỉnh sửa ngân sách thành công.` }; } catch (e) { return { success: false, message: `Lỗi Chỉnh sửa ngân sách: ${e.message}` }; } }

// --- DATA LOADING & RENDERING FUNCTIONS ---
async function validateTokenAndLoadData(token) { 
    if (!token) return;
    try {
        const fields = 'id,name,picture.type(large)';
        const response = await fetch(`https://graph.facebook.com/${API_VERSION}/me?fields=${fields}&access_token=${token}`);
        const data = await response.json();
        if (data.error) throw new Error(data.error.message);

        currentUserInfo = data;
        USER_ID = data.id;

        const avatarUrl = data.picture?.data?.url;
        if (avatarUrl) {
            // SỬA LỖI AVATAR: Thêm style để giới hạn kích thước ảnh
            $('#user-avatar').replaceWith(`<img id="user-avatar" src="${avatarUrl}" class="rounded-circle" alt="Avatar" style="width: 36px; height: 36px; object-fit: cover;">`);
        } else {
            $('#user-avatar').text(data.name.charAt(0).toUpperCase());
        }
        
        $('#user-name-display').html(`<strong>${data.name}</strong><small class="d-block text-muted">${data.id}</small>`);
        
        $('#user-info-container').removeClass('hidden').css('cursor', 'pointer');

        await switchTab('#bm');
    } catch (e) {
        console.error("Token validation failed:", e);
        const errorMessage = e.message.toLowerCase();
        let displayMessage = `Có lỗi xảy ra: ${e.message}.`;
        if (errorMessage.includes('session has expired') || errorMessage.includes('invalid oauth access token')) {
            displayMessage = "Access Token của bạn không hợp lệ hoặc đã hết hạn.";
        }
        showCustomMessage("Lỗi Access Token", `${displayMessage} Vui lòng thử lại.`, null);
        await logout();
    }
}

async function getOwnedObjectCount(parentId, edge, token) { try { const response = await fetch(`https://graph.facebook.com/${API_VERSION}/${parentId}/${edge}?limit=5000&access_token=${token}`); const json = await response.json(); if (json.error) { console.warn(`Could not fetch count for ${parentId}/${edge}: ${json.error.message}`); return 0; } return json.data ? json.data.length : 0; } catch (e) { console.warn(`Network error fetching count for ${parentId}/${edge}`); return 0; } }
function generateBMRows(bmData, sttOffset = 0) { let html = ''; bmData.forEach((bm, index) => { const stt = sttOffset + index + 1; const createdFormatted = new Date(bm.created_time).toLocaleDateString('vi-VN'); const status = bm.status; const statusClass = `status-${status}`; const dieDate = status === 'DIE' ? createdFormatted : "—"; const quyen = bm.permitted_roles?.includes('ADMIN') ? "Quản trị viên" : "Nhân viên"; let type = "BM"; if (bm.adCount >= 1000) type = "BM1000"; else if (bm.adCount >= 100) type = "BM100"; else if (bm.adCount >= 10) type = "BM10"; else if (bm.adCount >= 5) type = "BM5"; else if (bm.adCount >= 3) type = "BM3"; else if (bm.adCount >= 1) type = "BM1"; html += `<tr data-id="${bm.id}" data-type="bm" data-status="${bm.status}"><td class="text-center"><input type="checkbox" class="row-checkbox"></td><td class="text-center">${stt}</td><td>${generateActionDropdown('bm')}</td><td class="process-cell text-center"></td><td class="message-cell"></td><td class="${statusClass} status-cell">${status}</td><td class="font-semibold bm-name-cell">${bm.name}</td><td class="font-mono"><a href="https://business.facebook.com/settings/info?business_id=${bm.id}" target="_blank" class="text-blue-600 hover:underline">${bm.id}</a></td><td>${type}</td><td>${quyen}</td><td class="text-center">${bm.adCount}</td><td class="text-center">${bm.pageCount}</td><td class="text-center">${bm.slAdmin}</td><td>${createdFormatted}</td><td>${dieDate}</td><td>${bm.business_verification_status || "Chưa xác minh"}</td></tr>`; }); return html; }
async function loadBM(token) { showLoading("bmTableBody"); try { let allBMs = []; let nextUrl = `https://graph.facebook.com/${API_VERSION}/me/businesses?fields=id,name,created_time,business_verification_status,disable_reason,permitted_roles,owned_ad_accounts{account_status}&limit=25&access_token=${token}`; while (nextUrl) { const response = await fetch(nextUrl); const json = await response.json(); if (json.error) throw new Error(json.error.message); if (json.data?.length) allBMs = allBMs.concat(json.data); nextUrl = json.paging?.next || null; } const enrichedBMs = await Promise.all(allBMs.map(async bm => { const [pageCount, slAdmin] = await Promise.all([ getOwnedObjectCount(bm.id, 'owned_pages', token), getOwnedObjectCount(bm.id, 'business_users', token) ]); let adCount = 0; let hasLiveAdAccount = false; if (bm.owned_ad_accounts && bm.owned_ad_accounts.data) { adCount = bm.owned_ad_accounts.data.length; hasLiveAdAccount = bm.owned_ad_accounts.data.some(adAccount => adAccount.account_status === 1); } let status = 'DIE'; if (hasLiveAdAccount && (!bm.disable_reason || bm.disable_reason === 'NONE' || bm.disable_reason === 0)) { status = 'LIVE'; } return { ...bm, adCount, pageCount, slAdmin, status }; })); tableStates.bm.originalData = [...enrichedBMs]; tableStates.bm.loaded = true; handleFiltersAndSearch(); } catch (e) { console.error('loadBM error:', e); tableStates.bm.loaded = false; displayErrorInTable("bmTableBody", e); } }
function generatePageRows(pageData, sttOffset = 0) { let html = ''; pageData.forEach((page, index) => { const stt = sttOffset + index + 1; const statusText = page.is_published ? 'PUBLISHED' : 'UNPUBLISHED'; const statusClass = `status-${statusText}`; html += `<tr class="text-sm" data-id="${page.id}" data-type="page" data-status="${statusText}"><td class="text-center"><input type="checkbox" class="row-checkbox"></td><td class="text-center">${stt}</td><td>${generateActionDropdown('page')}</td><td class="process-cell text-center"></td><td class="message-cell"></td><td class="${statusClass} status-cell">${statusText}</td><td class="font-semibold">${page.name}</td><td class="font-mono"><a href="https://www.facebook.com/${page.id}" target="_blank" class="text-blue-600 hover:underline">${page.id}</a></td><td>${page.category || 'N/A'}</td><td>${page.fan_count.toLocaleString('vi-VN')}</td><td>${page.business?.name || 'Cá nhân'}</td><td>${new Date(page.created_time).toLocaleDateString('vi-VN')}</td></tr>`; }); return html; }
async function loadPages(token) { showLoading('pageTableBody'); try { const fields = 'id,name,is_published,category,fan_count,business,created_time'; const response = await fetch(`https://graph.facebook.com/${API_VERSION}/me/accounts?fields=${fields}&limit=200&access_token=${token}`); const json = await response.json(); if (json.error) throw new Error(json.error.message); tableStates.page.originalData = [...(json.data || [])]; tableStates.page.loaded = true; handleFiltersAndSearch(); } catch (error) { console.error('loadPages error:', error); tableStates.page.loaded = false; displayErrorInTable('pageTableBody', error); } }
function generatePixelRows(pixelData, sttOffset = 0) { let html = ''; pixelData.forEach((pixel, index) => { const stt = sttOffset + index + 1; const isActive = !!pixel.last_fired_time; const statusText = isActive ? 'ACTIVE' : 'INACTIVE'; const statusClass = `status-${statusText}`; const pixelUrl = pixel.owner_business?.id ? `https://business.facebook.com/events_manager2/summary?business_id=${pixel.owner_business.id}&asset_id=${pixel.id}` : `https://www.facebook.com/events_manager2/summary?asset_id=${pixel.id}`; html += `<tr class="text-sm" data-id="${pixel.id}" data-type="pixel" data-status="${statusText}"><td class="text-center"><input type="checkbox" class="row-checkbox"></td><td class="text-center">${stt}</td><td>${generateActionDropdown('pixel')}</td><td class="process-cell text-center"></td><td class="message-cell"></td><td class="${statusClass}">${statusText}</td><td class="font-semibold">${pixel.name}</td><td class="font-mono"><a href="${pixelUrl}" target="_blank" class="text-blue-600 hover:underline">${pixel.id}</a></td><td>${new Date(pixel.creation_time).toLocaleDateString('vi-VN')}</td><td>${isActive ? new Date(pixel.last_fired_time).toLocaleString('vi-VN') : 'Chưa kích hoạt'}</td><td>${pixel.owner_business?.name || 'Cá nhân'}</td></tr>`; }); return html; }
async function loadPixels(token) { showLoading('pixelTableBody'); try { let allPixels = []; try { const personalPixelsResponse = await fetch(`https://graph.facebook.com/${API_VERSION}/me/ad_pixels?fields=id,name,creation_time,last_fired_time,owner_business&limit=100&access_token=${token}`); const personalPixelsJson = await personalPixelsResponse.json(); if (personalPixelsJson.data) { allPixels = allPixels.concat(personalPixelsJson.data); } else if (personalPixelsJson.error) { console.warn("Không tải được Pixel cá nhân: ", personalPixelsJson.error.message); } } catch (e) { console.warn("Lỗi mạng khi tải Pixel cá nhân: ", e.message); } try { const bmResponse = await fetch(`https://graph.facebook.com/${API_VERSION}/me/businesses?fields=id&limit=100&access_token=${token}`); const bmJson = await bmResponse.json(); if (bmJson.data) { const pixelPromises = bmJson.data.map(bm => fetch(`https://graph.facebook.com/${API_VERSION}/${bm.id}/owned_pixels?fields=id,name,creation_time,last_fired_time,owner_business&limit=100&access_token=${token}`).then(res => res.json())); const bmPixelResults = await Promise.allSettled(pixelPromises); bmPixelResults.forEach(result => { if (result.status === 'fulfilled' && result.value.data) { allPixels = allPixels.concat(result.value.data); } }); } } catch (e) { console.warn("Lỗi mạng khi tải danh sách BM cho Pixel: ", e.message); } const uniquePixels = allPixels.filter((pixel, index, self) => index === self.findIndex(p => p.id === pixel.id)); tableStates.pixel.originalData = [...uniquePixels]; tableStates.pixel.loaded = true; handleFiltersAndSearch(); } catch (error) { console.error('Lỗi nghiêm trọng khi tải Pixels:', error); tableStates.pixel.loaded = false; displayErrorInTable('pixelTableBody', error); } }
async function loadAdAccountsData(token) { if (!token) return; showLoading("adAccountsTableBody"); try { let allFetchedAdAccounts = []; const uniqueAdAccountIds = new Set(); const fields = "id,name,account_status,amount_spent,owner,balance,spend_cap,currency,effective_daily_spend_limit,adtrust_dsl,business{id,name}"; const personalAdAccounts = await fetchAllPages(`https://graph.facebook.com/${API_VERSION}/me/adaccounts?fields=${fields}`, token); personalAdAccounts.forEach(acc => { if (!uniqueAdAccountIds.has(acc.id)) { allFetchedAdAccounts.push({ ...acc, source: 'personal' }); uniqueAdAccountIds.add(acc.id); } }); const businesses = await fetchAllPages(`https://graph.facebook.com/${API_VERSION}/me/businesses?fields=id,name&limit=100`, token); const bmAdAccountPromises = businesses.map(async bm => { try { const bmOwnedAdAccounts = await fetchAllPages(`https://graph.facebook.com/${API_VERSION}/${bm.id}/owned_ad_accounts?fields=${fields}`, token); return bmOwnedAdAccounts.map(acc => ({ ...acc, source: 'bm-owned', business: acc.business ? acc.business : { id: bm.id, name: bm.name, type: 'BUSINESS' } })); } catch (error) { console.warn(`Lỗi tải TKQC từ BM ${bm.name} (${bm.id}): ${error.message}`); return []; } }); const bmAdAccountsResults = await Promise.all(bmAdAccountPromises); bmAdAccountsResults.forEach(bmAccounts => { bmAccounts.forEach(acc => { if (!uniqueAdAccountIds.has(acc.id)) { allFetchedAdAccounts.push(acc); uniqueAdAccountIds.add(acc.id); } }); }); totalAdAccountSpend = 0; const processedAccounts = (allFetchedAdAccounts || []).map(acc => { let ownerName = "Không xác định"; let accountType = "Cá nhân"; if (acc.business && acc.business.name) { ownerName = acc.business.name; accountType = "Doanh nghiệp"; } else if (acc.owner) { ownerName = acc.owner.name || acc.owner.id || "Không rõ"; accountType = acc.owner.type === 'BUSINESS' ? "Doanh nghiệp" : "Cá nhân"; } let dailyLimitValue = 0; if (acc.adtrust_dsl && parseInt(acc.adtrust_dsl, 10) > 0) { dailyLimitValue = parseInt(acc.adtrust_dsl, 10); } else if (acc.effective_daily_spend_limit && acc.effective_daily_spend_limit.daily_spend_limit && parseInt(acc.effective_daily_spend_limit.daily_spend_limit, 10) > 0) { dailyLimitValue = parseInt(acc.effective_daily_spend_limit.daily_spend_limit, 10); } const thresholdValue = dailyLimitValue > 0 ? dailyLimitValue / 100 : 0; let limitDisplay = "Không giới hạn"; const spendCapValue = parseFloat(acc.spend_cap || '0'); if (spendCapValue > 0) { limitDisplay = (spendCapValue / 100).toLocaleString('en-US'); } let statusText; switch (acc.account_status) { case 1: statusText = "Hoạt động"; break; case 2: statusText = "Vô hiệu hóa"; break; case 3: statusText = "Chưa thanh toán"; break; case 7: statusText = "Đang chờ xem xét"; break; case 8: statusText = "Trong thời gian gia hạn"; break; case 9: statusText = "Đang chờ đóng"; break; case 10: statusText = "Đã đóng"; break; default: statusText = "Không hoạt động"; } const spentValue = parseFloat(acc.amount_spent || '0') / 100; totalAdAccountSpend += spentValue; return { id: acc.id, name: acc.name, status: statusText, balance: parseFloat(acc.balance || '0') / 100, threshold: thresholdValue, limit: limitDisplay, spent: spentValue, owner: ownerName, currency: acc.currency || 'USD', type: accountType, admin: "—", permission: "Toàn quyền" }; }); tableStates['ad-accounts'].originalData = [...processedAccounts]; tableStates['ad-accounts'].loaded = true; handleFiltersAndSearch(); } catch (err) { console.error('loadAdAccountsData error:', err); tableStates['ad-accounts'].loaded = false; displayErrorInTable("adAccountsTableBody", err); } }
function generateAdAccountsRows(adAccountsData, sttOffset = 0) { let html = ''; adAccountsData.forEach((acc, index) => { const stt = sttOffset + index + 1; const statusClass = acc.status.toLowerCase().replace(/\s/g, '-').replace(/đ/g, 'd').replace(/ă/g, 'a'); html += `<tr data-id="${acc.id}" data-type="adaccount" data-status="${acc.status}" data-currency="${acc.currency}"><td class="text-center"><input type="checkbox" class="row-checkbox"></td><td class="text-center">${stt}</td><td class="status-${statusClass}">${acc.status}</td><td>${generateActionDropdown('adaccount')}</td><td class="process-cell"></td><td class="message-cell"></td><td class="font-mono"><a href="https://adsmanager.facebook.com/adsmanager/manage/accounts?act=${acc.id.replace('act_','')}" target="_blank" class="text-blue-600 hover:underline">${acc.id}</a></td><td>${acc.owner}</td><td class="font-semibold">${acc.name}</td><td>${formatCurrency(acc.balance, acc.currency)}</td><td>${formatCurrency(acc.threshold, acc.currency)}</td><td>${acc.limit}</td><td>${formatCurrency(acc.spent, acc.currency)}</td><td>${acc.admin}</td><td>${acc.currency}</td><td>${acc.type}</td><td>${acc.permission}</td></tr>`; }); return html; }
function generateCampaignsRows(campaignsData, sttOffset = 0) { let html = ''; campaignsData.forEach((camp, index) => { const stt = sttOffset + index + 1; const campaignCurrency = camp.ad_account?.currency || 'USD'; const budget = camp.daily_budget ? `${formatCurrency(camp.daily_budget / 100, campaignCurrency)}/ngày` : (camp.lifetime_budget ? `${formatCurrency(camp.lifetime_budget / 100, campaignCurrency)}/trọn đời` : 'N/A'); const effectiveStatusClass = camp.effective_status ? `status-${camp.effective_status.toLowerCase().replace(/_/g, '-')}` : ''; const insights = camp.insights?.data?.[0]; const spend = insights ? formatCurrency(insights.spend / 100, campaignCurrency) : 'N/A'; const ctr = insights?.ctr ? parseFloat(insights.ctr).toFixed(2) + '%' : 'N/A'; const cpm = insights?.cpm ? formatCurrency(insights.cpm / 100, campaignCurrency) : 'N/A'; const campaignUrl = `https://adsmanager.facebook.com/adsmanager/manage/campaigns?act=${camp.ad_account.id.replace('act_','')}&campaign_id=${camp.id}`; html += `<tr data-id="${camp.id}" data-type="campaign" data-status="${camp.effective_status}"><td class="text-center"><input type="checkbox" class="row-checkbox"></td><td class="text-center">${stt}</td><td>${generateActionDropdown('campaign')}</td><td class="process-cell"></td><td class="${effectiveStatusClass}">${camp.effective_status}</td><td class="font-semibold">${camp.name}</td><td class="font-mono"><a href="${campaignUrl}" target="_blank" class="text-blue-600 hover:underline">${camp.id}</a></td><td>${camp.objective || 'N/A'}</td><td>${budget}</td><td>${spend}</td><td>${ctr}</td><td>${cpm}</td><td>${camp.ad_account.name} (${camp.ad_account.id})</td><td class="message-cell"></td></tr>`; }); return html; }
async function loadCampaignsData(token) { showLoading("campaignsTableBody"); totalCampaignsSpend = 0; try { if (!tableStates['ad-accounts'].originalData || tableStates['ad-accounts'].originalData.length === 0) { throw new Error("Không có tài khoản quảng cáo nào được tải để lấy chiến dịch."); } let fetchedCampaigns = []; const campaignPromises = tableStates['ad-accounts'].originalData.map(async acc => { try { const campaigns = await fetchAllPages(`https://graph.facebook.com/${API_VERSION}/${acc.id}/campaigns?fields=id,name,status,objective,daily_budget,lifetime_budget,configured_status,effective_status,insights{spend,ctr,cpm}&limit=100`, token); return campaigns.map(c => ({...c, ad_account: acc })); } catch (error) { console.warn(`Lỗi tải chiến dịch cho TKQC ${acc.name} (${acc.id}): ${error.message}`); return []; } }); const campaignGroups = await Promise.all(campaignPromises); fetchedCampaigns = campaignGroups.flat(); totalCampaignsSpend = fetchedCampaigns.reduce((sum, campaign) => sum + (parseFloat(campaign.insights?.data?.[0]?.spend || 0) / 100), 0); $('#all-campaigns-total-spend').text(`Tổng chi tiêu tất cả: ${formatCurrency(totalCampaignsSpend, 'USD')}`); tableStates.campaigns.originalData = fetchedCampaigns; tableStates.campaigns.loaded = true; handleFiltersAndSearch(); } catch (err) { tableStates.campaigns.loaded = false; displayErrorInTable('campaignsTableBody', err); } }
function renderStatisticsCharts() { const statsGrid = $('#statistics-grid'); statsGrid.html(''); Object.values(charts).forEach(chart => chart.destroy()); charts = {}; const createStatCard = (id, title) => { const card = $(`<div class="stat-card"><div class="stat-card-title">${title}</div><div class="stat-card-body"><div class="stat-card-chart"><canvas id="chart-${id}"></canvas></div><div class="stat-card-info" id="info-${id}"></div></div></div>`); statsGrid.append(card); }; const createDoughnutChart = (id, labels, data, colors) => { const ctx = document.getElementById(`chart-${id}`).getContext('2d'); charts[id] = new Chart(ctx, { type: 'doughnut', data: { labels: labels, datasets: [{ data: data, backgroundColor: colors, borderColor: $('body').hasClass('dark-mode') ? '#2d3748' : '#fff', borderWidth: 2 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false }, tooltip: { enabled: true } }, cutout: '70%' } }); }; const bmStats = tableStates.bm.originalData.reduce((acc, bm) => { acc[bm.status === 'LIVE' ? 'live' : 'die']++; return acc; }, { live: 0, die: 0 }); createStatCard('bm', 'Business Managers'); $('#info-bm').html(`<p class="stat-card-total">${tableStates.bm.originalData.length}</p><p><i class="fa-solid fa-circle text-green-500"></i> Live: ${bmStats.live}</p><p><i class="fa-solid fa-circle text-red-500"></i> Die: ${bmStats.die}</p>`); if (tableStates.bm.originalData.length > 0) { createDoughnutChart('bm', ['Live', 'Die'], [bmStats.live, bmStats.die], ['#22c55e', '#ef4444']); } const pageStats = tableStates.page.originalData.reduce((acc, page) => { acc[page.is_published ? 'live' : 'die']++; return acc; }, { live: 0, die: 0 }); createStatCard('page', 'Pages'); $('#info-page').html(`<p class="stat-card-total">${tableStates.page.originalData.length}</p><p><i class="fa-solid fa-circle text-green-500"></i> Live: ${pageStats.live}</p><p><i class="fa-solid fa-circle text-red-500"></i> Die: ${pageStats.die}</p>`); if (tableStates.page.originalData.length > 0) { createDoughnutChart('page', ['Live', 'Die'], [pageStats.live, pageStats.die], ['#22c55e', '#ef4444']); } const pixelStats = tableStates.pixel.originalData.reduce((acc, pixel) => { acc[pixel.last_fired_time ? 'active' : 'inactive']++; return acc; }, { active: 0, inactive: 0 }); createStatCard('pixel', 'Pixels'); $('#info-pixel').html(`<p class="stat-card-total">${tableStates.pixel.originalData.length}</p><p><i class="fa-solid fa-circle text-green-500"></i> Active: ${pixelStats.active}</p><p><i class="fa-solid fa-circle text-yellow-500"></i> Inactive: ${pixelStats.inactive}</p>`); if (tableStates.pixel.originalData.length > 0) { createDoughnutChart('pixel', ['Active', 'Inactive'], [pixelStats.active, pixelStats.inactive], ['#22c55e', '#f59e0b']); } const adAccountStats = tableStates['ad-accounts'].originalData.reduce((acc, ad) => { if (ad.status === 'Hoạt động') acc.live++; else if (['Vô hiệu hóa', 'Đã đóng'].includes(ad.status)) acc.die++; else acc.other++; return acc; }, { live: 0, die: 0, other: 0 }); createStatCard('ad-accounts', 'Tài khoản quảng cáo'); $('#info-ad-accounts').html(`<p class="stat-card-total">${tableStates['ad-accounts'].originalData.length}</p><p><i class="fa-solid fa-circle text-green-500"></i> Hoạt động: ${adAccountStats.live}</p><p><i class="fa-solid fa-circle text-red-500"></i> Vô hiệu hóa: ${adAccountStats.die}</p><p><i class="fa-solid fa-circle text-orange-500"></i> Khác: ${adAccountStats.other}</p>`); if (tableStates['ad-accounts'].originalData.length > 0) { createDoughnutChart('ad-accounts', ['Hoạt động', 'Vô hiệu hóa', 'Khác'], [adAccountStats.live, adAccountStats.die, adAccountStats.other], ['#22c55e', '#ef4444', '#f97316']); } const campaignStats = tableStates.campaigns.originalData.reduce((acc, camp) => { if (camp.effective_status === 'ACTIVE') acc.active++; else if (camp.effective_status === 'PAUSED') acc.paused++; else acc.other++; return acc; }, { active: 0, paused: 0, other: 0 }); createStatCard('campaigns', 'Chiến dịch'); $('#info-campaigns').html(`<p class="stat-card-total">${tableStates.campaigns.originalData.length}</p><p><i class="fa-solid fa-circle text-green-500"></i> Hoạt động: ${campaignStats.active}</p><p><i class="fa-solid fa-circle text-yellow-500"></i> Tạm dừng: ${campaignStats.paused}</p><p><i class="fa-solid fa-circle text-gray-500"></i> Khác: ${campaignStats.other}</p>`); if (tableStates.campaigns.originalData.length > 0) { createDoughnutChart('campaigns', ['Hoạt động', 'Tạm dừng', 'Khác'], [campaignStats.active, campaignStats.paused, campaignStats.other], ['#22c55e', '#f59e0b', '#6b7280']); } createStatCard('spend', 'Tổng chi tiêu'); $('#info-spend').html(`<p class="text-sm">TKQC:</p><p class="font-bold">${formatCurrency(totalAdAccountSpend, 'USD')}</p><p class="text-sm mt-2">Chiến dịch:</p><p class="font-bold">${formatCurrency(totalCampaignsSpend, 'USD')}</p>`); $('#chart-spend').parent().html('<i class="fa-solid fa-dollar-sign text-5xl text-green-500 m-auto"></i>');}
async function loadSettings() { try { const data = await chrome.storage.local.get('appSettings'); const savedSettings = data.appSettings || {}; const rowsPerPage = savedSettings.rowsPerPage || 20; $('#settings_rows_per_page').val(rowsPerPage); Object.keys(tableStates).forEach(key => { tableStates[key].itemsPerPage = rowsPerPage; }); const columnSpacing = savedSettings.columnSpacing || 0.5; $('#columnSpacing').val(columnSpacing); $('#spacingValue').text(columnSpacing); document.documentElement.style.setProperty('--table-cell-padding', columnSpacing + 'rem'); $('#captchaProvider').val(savedSettings.captchaProvider || '2captcha.com'); $('#apiCaptchaKey').val(savedSettings.apiCaptchaKey || ''); $('#simProvider').val(savedSettings.simProvider || 'viotp.com'); $('#apiSimKey').val(savedSettings.apiSimKey || ''); $('#mailProvider').val(savedSettings.mailProvider || 'fviainboxs.com'); $('#apiMailKey').val(savedSettings.apiMailKey || ''); maxConcurrentTasks = savedSettings.maxConcurrentTasks || 5; taskLoopCount = savedSettings.taskLoopCount || 1; $('#maxConcurrentTasks').val(maxConcurrentTasks); $('#taskLoopCount').val(taskLoopCount); if (savedSettings.darkMode) { $('body').addClass('dark-mode'); $('#toggle-dark-mode .mode-text').text('Light Mode'); $('#toggle-dark-mode i').removeClass('fa-moon').addClass('fa-sun'); } if (savedSettings.zoomLevel) { document.documentElement.style.setProperty('--base-font-size', savedSettings.zoomLevel + 'px'); } } catch (e) { console.error("Error loading settings:", e); } }
async function saveSettings() { const rowsPerPage = parseInt($('#settings_rows_per_page').val()); const columnSpacing = parseFloat($('#columnSpacing').val()); const newMaxConcurrentTasks = parseInt($('#maxConcurrentTasks').val()); const newTaskLoopCount = parseInt($('#taskLoopCount').val()); if (isNaN(rowsPerPage) || isNaN(columnSpacing) || isNaN(newMaxConcurrentTasks) || isNaN(newTaskLoopCount)) { showCustomMessage("Lỗi", "Vui lòng nhập giá trị số hợp lệ."); return; } Object.keys(tableStates).forEach(key => { tableStates[key].itemsPerPage = rowsPerPage; }); maxConcurrentTasks = newMaxConcurrentTasks; taskLoopCount = newTaskLoopCount; const settingsToSave = { rowsPerPage, columnSpacing, maxConcurrentTasks, taskLoopCount, captchaProvider: $('#captchaProvider').val(), apiCaptchaKey: $('#apiCaptchaKey').val(), simProvider: $('#simProvider').val(), apiSimKey: $('#apiSimKey').val(), mailProvider: $('#mailProvider').val(), apiMailKey: $('#apiMailKey').val(), darkMode: $('body').hasClass('dark-mode'), zoomLevel: parseFloat(document.documentElement.style.getPropertyValue('--base-font-size')) || 14 }; await chrome.storage.local.set({ appSettings: settingsToSave }); settingsModal.hide(); showCustomMessage("Thành công", "Cài đặt đã được lưu."); const activeTabHref = $('#sidebar-nav a.active').attr('href'); if (activeTabHref) { const activeTabId = activeTabHref.substring(1); if (tableStates[activeTabId]) { displayPage(activeTabId, 1); } } }
function handleFiltersAndSearch() { clearTimeout(searchTimeout); searchTimeout = setTimeout(() => { const searchTerm = $('#search-input').val().toLowerCase(); const activeTabId = $('.tab-content:not(.hidden)').attr('id'); if (!activeTabId) return; const state = tableStates[activeTabId]; if (state) { let filteredData = [...state.originalData]; const statusFilter = state.activeStatusFilter; if (statusFilter && statusFilter !== 'ALL') { filteredData = filteredData.filter(item => { const itemStatus = item.status || item.effective_status || (item.is_published ? 'PUBLISHED' : 'UNPUBLISHED') || (item.last_fired_time ? 'ACTIVE' : 'INACTIVE'); if (statusFilter === 'OTHER') { const mainStatuses = STATUS_FILTERS[activeTabId].map(f => f.value).filter(v => v !== 'ALL' && v !== 'OTHER'); return !mainStatuses.includes(itemStatus); } return itemStatus === statusFilter; }); } if (searchTerm) { try { filteredData = filteredData.filter(item => Object.values(item).some(val => String(val).toLowerCase().includes(searchTerm))); } catch (e) { console.warn("Lỗi khi tìm kiếm, có thể do cấu trúc dữ liệu phức tạp:", e); } } state.data = filteredData; displayPage(activeTabId, 1); } }, 250); }
function updateCopyButtons(tabId) { const container = $('#copy-buttons-container'); container.empty(); let tabName = ''; switch(tabId) { case 'bm': tabName = 'BM'; break; case 'ad-accounts': tabName = 'TKQC'; break; case 'campaigns': tabName = 'Camp'; break; case 'page': tabName = 'Page'; break; case 'pixel': tabName = 'Pixel'; break; default: return; } const buttonsHtml = `<button class="btn btn-outline-secondary copy-btn" data-type="all" title="Copy tất cả ID ${tabName} trong bảng">Copy ID</button><button class="btn btn-outline-success copy-btn" data-type="live" title="Copy ID ${tabName} Live">Copy Live</button><button class="btn btn-outline-danger copy-btn" data-type="die" title="Copy ID ${tabName} Die">Copy Die</button>`; container.html(buttonsHtml); }
let selectedColumnIndex = -1;
function moveColumn(direction) { if (selectedColumnIndex === -1) { showCustomMessage("Thông báo", "Vui lòng chọn một cột để di chuyển."); return; } const table = $('.tab-content:not(.hidden) .table'); const numCols = table.find('thead tr th').length; let targetIndex; if (direction === 'left') { if (selectedColumnIndex <= 2) return; targetIndex = selectedColumnIndex - 1; table.find('tr').each(function() { $(this).find('th, td').eq(selectedColumnIndex).insertBefore($(this).find('th, td').eq(targetIndex)); }); } else { if (selectedColumnIndex === numCols - 1) return; targetIndex = selectedColumnIndex + 1; table.find('tr').each(function() { $(this).find('th, td').eq(selectedColumnIndex).insertAfter($(this).find('th, td').eq(targetIndex)); }); } selectedColumnIndex = targetIndex; }

function populateAndShowUserInfoModal() {
    if (!currentUserInfo || !userInfoModal) return;
    $('#modal-user-avatar-img').attr('src', currentUserInfo.picture?.data?.url || '');
    $('#modal-user-name').text(currentUserInfo.name || 'Không có');
    $('#modal-user-uid').text(currentUserInfo.id || 'Không có');
    
    $('#modal-user-email').parent().hide();
    $('#modal-user-birthday').parent().hide();
    $('#modal-user-friends').parent().hide();
    $('#modal-user-gender').parent().hide();

    userInfoModal.show();
}

async function logout() {
    await chrome.storage.local.remove('ACCESS_TOKEN');
    ACCESS_TOKEN = "";
    USER_ID = "";
    currentUserInfo = {};
    if(userInfoModal) userInfoModal.hide();
    if(taskModal) taskModal.hide();
    if(settingsModal) settingsModal.hide();
    if(customMessageModal) customMessageModal.hide();
    $('#user-info-container').addClass('hidden');
    if ($('#user-avatar').is('img')) {
       $('#user-avatar').replaceWith('<div id="user-avatar" class="avatar"></div>');
    }
    $('#user-name-display').html('');
    Object.keys(tableStates).forEach(key => { tableStates[key].loaded = false; tableStates[key].data = []; tableStates[key].originalData = []; });
    $('.tab-content:not(#bm) tbody').empty();
    showLoading('bmTableBody');
    loginModal.show();
}

const DATA_LOADERS = {
    'bm': loadBM,
    'page': loadPages,
    'pixel': loadPixels,
    'ad-accounts': loadAdAccountsData,
    'campaigns': loadCampaignsData
};

// --- DOM & EVENT LISTENERS ---
document.addEventListener('DOMContentLoaded', async () => {
    loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
    customMessageModal = new bootstrap.Modal(document.getElementById('customMessageModal'));
    taskModal = new bootstrap.Modal(document.getElementById('taskModal'));
    settingsModal = new bootstrap.Modal(document.getElementById('settingsModal'));
    helpModal = new bootstrap.Modal(document.getElementById('helpModal'));
    userInfoModal = new bootstrap.Modal(document.getElementById('userInfoModal'));

    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('fullscreen') === 'true') {
        document.body.classList.add('fullscreen-mode');
    }

    await loadSettings();

    $(document).on('click', '#user-info-container', () => populateAndShowUserInfoModal());
    $(document).on('click', '#logoutBtnModal', () => logout());

    $('#sidebar-toggle-header').on('click', () => $('#sidebar').toggleClass('collapsed'));
    $('#toggle-dark-mode').on('click', async function() { $('body').toggleClass('dark-mode'); const isDarkMode = $('body').hasClass('dark-mode'); $(this).find('.mode-text').text(isDarkMode ? 'Light Mode' : 'Dark Mode'); $(this).find('i').toggleClass('fa-moon fa-sun'); await saveSettings(); if ($('#statistics').is(':not(.hidden)')) { renderStatisticsCharts(); } });
    const zoom = async (delta) => { let currentSize = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--base-font-size')); const newSize = Math.max(10, Math.min(20, currentSize + delta)); document.documentElement.style.setProperty('--base-font-size', newSize + 'px'); await saveSettings(); };
    $('#zoom-in').on('click', () => zoom(1));
    $('#zoom-out').on('click', () => zoom(-1));
    $('#sidebar-nav a').on('click', async function(e) { e.preventDefault(); await switchTab($(this).attr('href')); });
    
    $('#refresh-all').on('click', () => {
        const activeTabHref = $('#sidebar-nav a.active').attr('href');
        if (!activeTabHref || !ACCESS_TOKEN) return;
        const targetId = activeTabHref.substring(1);
        if (tableStates[targetId]) {
            showCustomMessage("Đang tải lại...", `Làm mới dữ liệu cho tab ${targetId.toUpperCase()}`, 2000);
            tableStates[targetId].loaded = false;
            if (targetId === 'campaigns') {
                tableStates['ad-accounts'].loaded = false;
            }
            switchTab(activeTabHref);
        }
    });
    
    $('#fullscreen-btn').on('click', () => { chrome.tabs.create({ url: chrome.runtime.getURL("popup.html?fullscreen=true") }); });
    $('#settings-btn').on('click', () => settingsModal.show());
    $('#saveSettingsBtn').on('click', saveSettings);
    $('#columnSpacing').on('input', function() { const spacing = $(this).val(); document.documentElement.style.setProperty('--table-cell-padding', spacing + 'rem'); $('#spacingValue').text(spacing); });
    $('#executeTaskBtn').on('click', executeTaskFromModal);
    $(document).on('change', '.action-select', function() { const select = $(this); const taskKey = select.val(); if (!taskKey) return; const primaryRowElement = select.closest('tr'); openTaskModal(taskKey, primaryRowElement.data('id'), primaryRowElement[0]); select.val(''); });
    $('#search-input').on('keyup', handleFiltersAndSearch);
    $(document).on('click', '#status-filter-container button', function() { const button = $(this); const activeTabId = $('.tab-content:not(.hidden)').attr('id'); const state = tableStates[activeTabId]; if (state) { state.activeStatusFilter = button.data('value'); button.siblings().removeClass('active'); button.addClass('active'); handleFiltersAndSearch(); } });
    
    $(document).on('click', '#tab-content-wrapper .table tbody tr', function(e) {
        if ($(e.target).closest('a, button, input, select').length > 0) {
            return;
        }
        $(this).siblings().removeClass('selected');
        $(this).addClass('selected');
    });

    $(document).on('click', '#tab-content-wrapper .table thead th', function(e) { if ($(e.target).is('input[type="checkbox"]')) { return; } const table = $(this).closest('.table'); const thIndex = $(this).index(); table.find('.selected-col').removeClass('selected-col'); if (selectedColumnIndex !== thIndex) { selectedColumnIndex = thIndex; table.find('tr').each(function() { $(this).find('th, td').eq(thIndex).addClass('selected-col'); }); } else { selectedColumnIndex = -1; } });
    $(document).on('click', '.select-all', function() { const table = $(this).closest('.table'); table.find('tbody .row-checkbox').prop('checked', this.checked); });
    $(document).on('click', '.row-checkbox', function() { const table = $(this).closest('.table'); const allChecked = table.find('tbody .row-checkbox:checked').length === table.find('tbody .row-checkbox').length; table.find('thead .select-all').prop('checked', allChecked); });
    $(document).on('click', '#copy-buttons-container .copy-btn', function() { const copyType = $(this).data('type'); const activeTabId = $('.tab-content:not(.hidden)').attr('id'); const state = tableStates[activeTabId]; if (!state || !state.data) return; let idsToCopy = []; let dataToFilter = state.data; const tableId = activeTabId === 'ad-accounts' ? '#adAccountsTable' : `#${activeTabId}Table`; const checkedRows = $(`${tableId} tbody .row-checkbox:checked`); if (checkedRows.length > 0) { const checkedIds = checkedRows.map(function() { return $(this).closest('tr').data('id'); }).get(); dataToFilter = state.data.filter(item => checkedIds.includes(item.id)); } if (copyType === 'all') { idsToCopy = dataToFilter.map(item => item.id); } else if (copyType === 'live') { idsToCopy = dataToFilter.filter(item => { const status = $(`tr[data-id="${item.id}"]`).data('status'); return ['LIVE', 'PUBLISHED', 'ACTIVE', 'Hoạt động'].includes(status); }).map(item => item.id); } else if (copyType === 'die') { idsToCopy = dataToFilter.filter(item => { const status = $(`tr[data-id="${item.id}"]`).data('status'); return ['DIE', 'UNPUBLISHED', 'INACTIVE', 'Vô hiệu hóa', 'Đã đóng'].includes(status); }).map(item => item.id); } copyToClipboard(idsToCopy.join('\n')); });
    $('#move-row-up').on('click', () => $('.tab-content:not(.hidden) tr.selected').insertBefore($('.tab-content:not(.hidden) tr.selected').prev()));
    $('#move-row-down').on('click', () => $('.tab-content:not(.hidden) tr.selected').insertAfter($('.tab-content:not(.hidden) tr.selected').next()));
    $('#move-col-left').on('click', () => moveColumn('left'));
    $('#move-col-right').on('click', () => moveColumn('right'));
    $('#tab-content-wrapper').on('click', '.pagination-controls button', function() { const button = $(this); const tabId = button.closest('.tab-content').attr('id'); const state = tableStates[tabId]; if (!state) return; let newPage = state.currentPage; if (button.hasClass('page-btn')) { newPage = parseInt(button.data('page')); } else if (button.hasClass('prev-btn')) { newPage = state.currentPage - 1; } else if (button.hasClass('next-btn')) { newPage = state.currentPage + 1; } if (!isNaN(newPage)) { displayPage(tabId, newPage); } });
    
    const data = await chrome.storage.local.get('ACCESS_TOKEN');
    ACCESS_TOKEN = data.ACCESS_TOKEN || "";
    if (ACCESS_TOKEN) {
        validateTokenAndLoadData(ACCESS_TOKEN);
    } else {
        loginModal.show();
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        if (tab.url && (tab.url.includes('facebook.com') || tab.url.includes('meta.com'))) {
            chrome.scripting.executeScript({ target: { tabId: tab.id }, files: ['content_script.js'] });
        } else {
            $('#loginModal .modal-body').html('<p class="text-danger">Vui lòng truy cập trang business.facebook.com và mở lại tiện ích để tự động đăng nhập.</p>');
        }
    }
    chrome.runtime.onMessage.addListener(async (message) => { if (message.type === 'ACCESS_TOKEN_RESULT') { if (message.token) { ACCESS_TOKEN = message.token; await chrome.storage.local.set({ ACCESS_TOKEN: ACCESS_TOKEN }); loginModal.hide(); validateTokenAndLoadData(ACCESS_TOKEN); } else { $('#loginModal .modal-body').html('<p class="text-danger">Không thể tự động tìm thấy Token. Vui lòng thử làm mới trang Facebook và mở lại tiện ích.</p><button id="getTokenHelpBtn" class="btn btn-link btn-sm w-100">Xem hướng dẫn thủ công</button>'); } } });
    $(document).on('click', '#getTokenHelpBtn', () => helpModal.show());
});